#!/usr/bin/env python

import argparse
import pathlib
import socket
import sys
import textwrap
from typing import Mapping

try:
    import requests
except ImportError as exc:
    print(f'{pathlib.Path(__file__).name}:', exc.msg)
    sys.exit(1)
import logging

logging.basicConfig(level=logging.ERROR)
log = logging.getLogger(__name__)

# TODO)):
# tags: https://docs.ntfy.sh/emojis/

PROG = pathlib.Path(__file__).name
HELP = textwrap.dedent(
    f"""{PROG}: [Options]

    Send a message to ntfy.sh

arguments:
  -c, --topic       Topic
  -t, --title       Title of message
  -m, --mesg        Message to send
  -T, --tags        Tags to send (default: clipboard)
  -p, --priority    Priority of message (default: default)
  -h, --help        Show this help message and exit"""
)


def send_notify(
    topic: str, title: str, msg: str, priority: str, tags: str
) -> None:
    headers: Mapping[str, str | bytes | None] = {
        'Title': title.encode(encoding='utf-8'),
        'Priority': priority,
        'Markdown': 'yes',
        'Tags': tags,
    }
    url = f'https://ntfy.sh/{topic}'
    requests.post(
        url,
        data=msg.encode(encoding='utf-8'),
        headers=headers,
        timeout=10,
    )


def setup_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(epilog=HELP, add_help=False)
    parser.add_argument('-c', '--topic')
    parser.add_argument('-m', '--mesg')
    parser.add_argument('-t', '--title', default=socket.gethostname())
    parser.add_argument('-T', '--tags', type=str, default='clipboard')
    parser.add_argument(
        '-p',
        '--priority',
        default='default',
        choices=['default', 'high', 'urgent'],
    )
    parser.add_argument('-h', '--help', action='store_true')
    return parser.parse_args()


def main() -> int:
    args = setup_args()
    try:
        if args.help or args.mesg is None:
            print(HELP)
            return 0

        if args.topic is None:
            err = f'{PROG}: missing ntfy.sh <topic>'
            log.error(err)
            return 1

        send_notify(args.topic, args.title, args.mesg, args.priority, args.tags)
    except KeyboardInterrupt:
        log.info('terminated by user')
    return 0


if __name__ == '__main__':
    sys.exit(main())
