#!/usr/bin/env bash

# ‚îè‚îÅ‚ï∏‚îè‚îÅ‚îì‚ïª ‚ïª‚îè‚îÅ‚ï∏‚îè‚îÅ‚îì‚îè‚îÅ‚ï∏‚îè‚îÅ‚îì
# ‚îÉ  ‚î£‚îÅ‚îõ‚îÉ ‚îÉ‚î£‚ï∏ ‚î£‚î≥‚îõ‚î£‚ï∏ ‚îÉ‚îì‚îÉ
# ‚îó‚îÅ‚ï∏‚ïπ  ‚îó‚îÅ‚îõ‚ïπ  ‚ïπ‚îó‚ï∏‚îó‚îÅ‚ï∏‚îó‚îª‚îõ
#
# Utility designed to manage CPU frequency scaling
#   - Displays available scaling modes
#   - Displays current scaling governor
#   - Sets the CPU scaling mode
#
# Deps:
#   - tlp-stat, notify-send, tput

set -o errexit
set -o pipefail

PROG=$(basename "$0")
AVAILABLE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors"
GOVERNOR=(/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor)
DEPS=(tlp-stat)

# notification
NOTI_ICON="power-profile-performance-symbolic"

# always ask password
sudo -k

# colors
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
BOLD=$(tput bold)
WHITE=$(tput setaf 7)
RESET="$(tput sgr0)"

function help_modes {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    for available in "${scaling_available[@]}"; do
        printf "    - %s\n" "$available"
    done
}

function usage {
    cat <<-_EOF
usage: $PROG [OPTIONS]

    Set CPU Frequencies

available:
$(help_modes)

options:
    -s, --set           Set mode <MODE>
    -S, --stats         Display stats
    -c, --current       Display current governor
    -m, --menu          Display governors to chose
    -h, --help          Display this help and exit
_EOF
}

function log_err {
    local msg="$1"
    printf "%s: %s\n" "$PROG" "$msg" >&2
    exit 1
}

function notify {
    # check if calling from x11
    if [[ -z "$DISPLAY" ]]; then
        return
    fi

    local msg="$1"
    local icon="${2:-dialog-information}"
    local hints="string:x-canonical-private-synchronous:cpufreq"
    notify-send -r 666 -a "$PROG" -i "$icon" -t 3000 "$PROG" "$msg" -h "$hints"
}

function logme {
    local msg="$1"
    local color="${2:-$BLUE}"
    printf "%s: %b%s%b\n" "$PROG" "$color" "$msg" "$RESET"
}

function mode_available {
    local mode="$1"
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"

    for available in "${scaling_available[@]}"; do
        if [[ "$mode" == "$available" ]]; then
            logme "mode '${mode}' is available" "$MAGENTA"
            return 0
        fi
    done

    logme "mode '$mode' not available" "$RED"
    mode_list

    return 1
}

function mode_list {
    local scaling_available
    IFS=" " read -r -a scaling_available <<<"$(cat "$AVAILABLE")"
    logme "available modes"
    for available in "${scaling_available[@]}"; do
        printf "  - %b%s%b\n" "$MAGENTA" "$available" "$RESET"
    done
}

function mode_check {
    local mode="$1"

    [[ -z "$mode" ]] && logme "err mode not found" "$RED" && exit 130

    if ! mode_available "$mode"; then
        return 1
    fi

    return 0
}

function mode_set {
    local mode="$1"

    if ! mode_check "$mode"; then
        return 1
    fi

    logme "setting to '$mode' mode" "$BLUE"
    echo "$mode" | sudo tee "${GOVERNOR[@]}" >/dev/null
    notify "üî¥ setting to <b>$mode</b> mode" "$NOTI_ICON"
}

function show_stats {
    sudo tlp-stat -p
}

function show_current {
    local governor
    governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
    logme "$governor"
}

function prompt {
    local color="$1"
    local mesg="$2"
    echo -ne "${color}${BOLD}${mesg}${RESET}"
}

function show_menu {
    local governors
    IFS=" " read -r -a governors <<<"$(cat "$AVAILABLE")"

    while true; do
        count=1

        prompt "${WHITE}" "select mode:\n"
        echo
        # show options
        for gov in "${governors[@]}"; do
            printf "  %s. %s\n" "$count" "$gov"
            count=$((count + 1))
        done

        prompt "${BLUE}" "\nenter choice: "
        read -r CHOSEN

        # set mode
        case "$CHOSEN" in
        [1-9] | [1-9][0-9] | [1-9][0-9][0-9])
            mode_set "${governors[$((CHOSEN - 1))]}"
            break
            ;;
        *) ;;
        esac
        clear
    done
}

function main {
    local arg="$1"

    for dep in "${DEPS[@]}"; do
        if ! command -v "$dep" >/dev/null; then
            log_err "$dep not found"
        fi
    done

    case "$arg" in
    -s | *set) shift && mode_set "$@" ;;
    -c | *current) show_current ;;
    -S | *stats) show_stats ;;
    -m | *menu) show_menu ;;
    *) usage ;;
    esac

    return 0
}

main "$@"
