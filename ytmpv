#!/usr/bin/env bash

# usage:
#   $ ytmpv <URL>
#
# example:
#   $ ytmpv "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
#
# play a video from a given url using mpv with notifications and logging.

set -o errexit
set -o pipefail

PROG=$(basename "$0")
DEPS=(mpv curl perl mpvc mpvqueue)
LOGGER="${LOGS_PATH:-$HOME/docs/log}/${PROG}.log"
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

function create_file {
    local file="$1"
    touch "$file"
    sleep 1
}

function log_err {
    printf "%s: %s\n" "$PROG" "$*" >&2
    exit 1
}

function check_dependencies {
    for cmd in "${DEPS[@]}"; do
        if ! command -v "$cmd" >/dev/null; then
            log_err "dependency '$cmd' not found"
        fi
    done
}

function log_mesg {
    local title="$1"
    local url="$2"
    echo "[$(date '+%F %T')]::[$PROG]::${title}::[URL]::${url}" | tee -a "$LOGGER" >/dev/null
}

function notification {
    local mesg="Launching: $1"
    notify-send "$PROG" "$mesg"
}

function open_mpv {
    setsid -f mpv --input-ipc-server="${MPVSOCKET:-/tmp/mpvsocket}" -quiet "$1" >/dev/null 2>&1 &
}

function usage {
    cat <<-_EOF
Usage: $PROG <URL>
_EOF
    exit
}

function main {
    local url video_title
    if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
        usage
    fi

    check_dependencies

    url="$1"
    [[ -z "$url" ]] && log_err "no <URL> found"

    if ! curl -sL -I "$url" >/dev/null 2>&1; then
        log_err "failed to retrieve the URL: '$url'"
    fi

    video_title=$(curl -sL "$url" | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si')
    if [[ -z "$video_title" ]]; then
        video_title="err: failed to extract video title."
    fi

    log_mesg "$video_title" "$url"
    # open_mpv "$url"
    setsid -f mpvqueue "$url" &
    notification "$video_title"
}

main "$@"
